class AttackRunner extends GraphicsObject{#arrows;#attackTimeQueue;#attackManager;#player;#hud;#gameplayStage;constructor(t,e,a,r){super(),this.#arrows=[],this.#attackTimeQueue=[2e3],this.#player=t,this.#hud=e,this.#attackManager=new AttackManager(a),this.#gameplayStage=r}#addAttackArrows(a){var r=this.#attackTimeQueue[0]||0,s=a.clockwiseShift,i=Math.floor(4*Math.random()),h=a.arrows.length;for(let e=0;e<h;++e){var o=a.arrows[e];let t=o.direction;"?"===t?t=Math.floor(4*Math.random()):(t=parseInt(t),s&&(t=(t+i)%4));var u=o.targetTime+r;this.#arrows.push(new Arrow(t,o.reversed,u,o.speed,e===h-1,this.#gameplayStage))}}addNextAttack(){2<=this.#attackTimeQueue.length&&(t=this.#attackTimeQueue[0],this.#attackTimeQueue.shift(),this.#attackTimeQueue[0]+=t);var t=this.#attackManager.getNextAttack();null!=t&&(this.#addAttackArrows(t),this.#attackTimeQueue.push(t.nextTime))}removeAllArrows(){for(let t=0;t<this.#arrows.length;++t)this.#gameplayStage.removeChild(this.#arrows[t].sprite);this.#arrows=[]}arrowsEmpty(){return 0===this.#arrows.length}reset(){this.#attackTimeQueue=[2e3],this.#attackManager.reset()}#arrowShieldSameSide(t){t=(t.direction+(t.reversed?2:0))%4;return this.#player.shieldDir===t}#removeArrow(t,e){t.last&&this.#hud.incrementAttackNumber(),this.#gameplayStage.removeChild(t.sprite),this.#arrows.splice(e,1)}update(e){for(let t=this.#arrows.length-1;0<=t;--t){const a=this.#arrows[t];a.update(e),a.targetTime/1e3*a.speed<-Player.shieldDistance+Player.heartDistance?(this.#player.takeDamage(),this.#removeArrow(a,t)):a.targetTime<=0&&this.#arrowShieldSameSide(a)&&(Main.runner.assetManager.getAudio("arrowBlockedSfx").play(),this.#player.hitShield(),this.#removeArrow(a,t))}0!==this.#attackTimeQueue.length&&(this.#attackTimeQueue[0]-=e,this.#attackTimeQueue[0]<=0&&this.addNextAttack())}get numAttacks(){return this.#attackManager.numAttacks}}
